#!/bin/bash

#    Copyright 2010 Chris Jang
#
#    This file is part of GATLAS.
#
#    GATLAS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    GATLAS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with GATLAS.  If not, see <http://www.gnu.org/licenses/>.

NUMTRIALS=10
TOPN=3

case $# in
  7) DEVICETYPE=$1 ; OUTPUTDIR=$2 ; CALCTYPE=$3 ; MEMTYPE=$4 ; BUSXFER="none" ; MATSIZE_START=$5 ; MATSIZE_STOP=$6 ; MATSIZE_STEP=$7 ;;
  8) DEVICETYPE=$1 ; OUTPUTDIR=$2 ; CALCTYPE=$3 ; MEMTYPE=$4 ; BUSXFER=$5 ; MATSIZE_START=$6 ; MATSIZE_STOP=$7 ; MATSIZE_STEP=$8 ;;
  *) echo usage: $0 device output_directory mm\|gemm buffer\|image \[none\|to\|from\|tofrom\] matrix_size_start matrix_size_stop matrix_size_step
     echo
     echo "device              - cpu[X], gpu[X], acc[X] where X = 0, 1,..."
     echo "mm|gemm             - matrix multiply or general matrix multiply"
     echo "buffer|image        - memory buffers or images"
     echo "none|to|from|tofrom - PCIe bus data transfer between host and device (default is none)"
     echo
     echo "good values for:                    start, stop and step:"
     echo "    powers of 2 by wavefront size:  256    5632     64"
     echo "    even 100s:                      200    5600     100"
     echo
     echo "finer granularity has not been observed to find faster kernels:"
     echo "    powers of 2 by half wavefront:  256    5632     32"
     echo "    increments of 40:               200    5600     40"
     echo
     echo "The above settings are for relatively exhaustive characterization."
     echo "It can take many hours to run. However, this need only be done once."
     echo "In practice, certain matrix sizes such as:"
     echo
     echo "    powers of 2:       1024, 1536, 2048, 4096, 5632"
     echo "    multiples of 800:  2400, 3200, 4000, 4800, 5600"
     echo
     echo "are observed to perform well. Slightly faster kernels may be found"
     echo "at other matrix sizes. The difference will be small so a search over"
     echo "a limited set of matrix sizes should be sufficient for practical use."
     echo 
     exit 1
esac


if [ -d $OUTPUTDIR ]; then
  echo generating files in: $OUTPUTDIR
else
  echo error: $OUTPUTDIR does not exist
  exit 1
fi

case $CALCTYPE in
  mm) ;;
  gemm) ;;
  *) echo error: invalid calculation type $CALCTYPE, must be mm or gemm
     exit 1
esac

case $MEMTYPE in
  buffer) ;;
  image) ;;
  *) echo error: invalid type $MEMTYPE, must be buffer or image
     exit 1
esac

case $BUSXFER in
  none) BUSXFEROPT="" ; BUSXFERSUFFIX="" ;;
  to) BUSXFEROPT="-s" ; BUSXFERSUFFIX="_to" ;;
  from) BUSXFEROPT="-r" ; BUSXFERSUFFIX="_from" ;;
  tofrom) BUSXFEROPT="-s -r" ; BUSXFERSUFFIX="_tofrom" ;;
  *) echo error: invalid bus transfer option $BUSXFER, must be one of: none, to, from, tofrom
     exit 1
esac


function bench_impl() {
  matrixsize=$1
  extraflags=$2
  filesuffix=$3
  OUTFILE=$OUTPUTDIR/b${CALCTYPE}_${MEMTYPE}${BUSXFERSUFFIX}$filesuffix.$matrixsize
  if [ -f $OUTFILE ]; then
    echo -n skip
  else
    cp /dev/null $OUTFILE
    cp /dev/null journalfile
    while [ `grep '***DONE***' $OUTFILE | wc -l` -ne 1 ]; do
      ./b${CALCTYPE}_$MEMTYPE \
        -d $DEVICETYPE \
        -j journalfile \
        -n $matrixsize \
        -t $NUMTRIALS \
        -w $TOPN \
        -e \
        $extraflags \
        $BUSXFEROPT \
        > $OUTFILE 2>&1
    done
    echo -n .
  fi
}

function bench() {
  bench_impl $1 "" ""
}

function bench_a() {
  bench_impl $1 "-a" "_a"
}

function bench_b() {
  bench_impl $1 "-b" "_b"
}

function bench_a_b() {
  bench_impl $1 "-a -b" "_a_b"
}

function bench_all() {
  matrixsize=$1
  bench $matrixsize
  bench_a $matrixsize
  bench_b $matrixsize
  bench_a_b $matrixsize
}


# main loop
MATSIZE=$MATSIZE_START
while [ $MATSIZE -le $MATSIZE_STOP ]; do
  echo -n $MATSIZE
  bench_all $MATSIZE
  echo
  MATSIZE=`expr $MATSIZE + $MATSIZE_STEP`
done

